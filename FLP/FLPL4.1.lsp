(defun maxlist (x)
	(prog (ret)
		(cond ((null x) (return nil)))
		(setq ret (car x))
		(setq x (cdr x))
		cycle
			(cond ((null x) (return ret)))
			(cond ((> (car x) ret) (setq ret (car x))))
			(setq x (cdr x))
		(go cycle)
	)
)

(defun countnum (x n)
	(prog (ret)
		(cond ((null x) (return nil)))
		(setq ret 0)
		cycle
			(cond ((null x) (return ret)))
			(cond ((= (car x) n) (setq ret (+ 1 ret))))
			(setq x (cdr x))
		(go cycle)
	)
)

(defun makenewlist (x i n)
	(prog (ret)
		(cond ((null x) (return nil)))
		(setq ret ())
		cycle
			(cond ((> i n) (return ret)))
			(setq ret (append ret (list (countnum x i))))
			(setq i (+ 1 i))
		(go cycle)
	)
)

(defun fun (x)
	(makenewlist x 1 (maxlist x))
)