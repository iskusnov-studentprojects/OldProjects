/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package forms;
import helpclasses.*;
import main.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;

/**
 *
 * @author домо
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        running = false;
        addKeyListener(new KeyAdapter(){
            @Override
            public void keyReleased(KeyEvent e){
                switch(e.getKeyCode()){
                case KeyEvent.VK_F1: showStatistic();
                    break;
                case KeyEvent.VK_SPACE: if(running)
                       stopGame();
                    else
                       runGame();
                    break;
                case KeyEvent.VK_N: newGame();
                   break;
               }
            }
        });
        timer = new javax.swing.Timer(200, new ActionListener(){
            public void actionPerformed(ActionEvent e){
                if(running && gameStarted){
                    race1.turn();
                    race2.turn();
                    repaint();
                    if(!raceIsAlive(race1)){
                        stopGame();
                        gameStarted = false;
                        javax.swing.JOptionPane.showMessageDialog(null, "Победила Race2!");
                    }
                    if(!raceIsAlive(race2)){
                        stopGame();
                        gameStarted = false;
                        javax.swing.JOptionPane.showMessageDialog(null, "Победила Race1!");
                    }
                }
            }
        });
        timer.start();
    }
    
    javax.swing.Timer timer;
    boolean running;
    boolean gameStarted;
    Race race1;
    Race race2;
    StatisticForm statistic;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Space War");
        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 638, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 469, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    
    @Override
    public void paint(Graphics g){
        g.clearRect(0, 0, getWidth(), getHeight());
        if(race1 != null)
            race1.draw(g, this.getWidth(), this.getHeight());
        if(race2 != null)
            race2.draw(g, this.getWidth(), this.getHeight());
        for(Planet i: Constants.PLANETS)
            i.draw(g, this.getWidth(), this.getHeight());
    }
    
    private void runGame(){
        running = true;
    }
    
    private void stopGame(){
        running = false;
    }
    
    private void newGame(){
        Constants.SPACE.clear();
        Constants.PLANETS.clear();
        if(statistic != null){
            statistic.dispose();
            statistic = null;
        }
        Random rand = new Random();
        for(int i = 0; i < Constants.PLANETNUMBER; i++)
        {
            int x, y;
            do{
                x = rand.nextInt(Constants.SPACEWIDTH) + 1;
                y = rand.nextInt(Constants.SPACEHEIGHT) + 1;
            }while(Constants.SPACE.field[x][y] != null);
            Planet p = new Planet(x,y,PlayerColor.None);
            Constants.SPACE.field[x][y] = p;
            Constants.PLANETS.add(p);
            
        }
        race1 = new Race(RaceType.RegenerationRace, PlayerColor.Green);
        race2 = new Race(RaceType.StealthRace, PlayerColor.Red);
        Constants.PLANETS.get(0).playerColor = PlayerColor.Green;
        Constants.PLANETS.get(1).playerColor = PlayerColor.Red;
        this.repaint();
        gameStarted = true;
        runGame();
    }
    
    private void showStatistic(){
        statistic = new StatisticForm(race1, race2);
        statistic.setVisible(true);
    }
    
    public boolean raceIsAlive(Race race){
    int allPlanets = 0, poorPlanets = 0;
    for(Planet i: Constants.PLANETS)
        if(i.playerColor == race.playerColor){
            allPlanets++;
            if(i.resources <= 200)
                poorPlanets++;
        }
    if(allPlanets == poorPlanets && race.ships.isEmpty())
        return false;
    else
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
